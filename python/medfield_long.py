# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _medfield
else:
    import _medfield

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator_medfield_module(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _medfield.delete_SwigPyIterator_medfield_module

    def value(self):
        return _medfield.SwigPyIterator_medfield_module_value(self)

    def incr(self, n=1):
        return _medfield.SwigPyIterator_medfield_module_incr(self, n)

    def decr(self, n=1):
        return _medfield.SwigPyIterator_medfield_module_decr(self, n)

    def distance(self, x):
        return _medfield.SwigPyIterator_medfield_module_distance(self, x)

    def equal(self, x):
        return _medfield.SwigPyIterator_medfield_module_equal(self, x)

    def copy(self):
        return _medfield.SwigPyIterator_medfield_module_copy(self)

    def next(self):
        return _medfield.SwigPyIterator_medfield_module_next(self)

    def __next__(self):
        return _medfield.SwigPyIterator_medfield_module___next__(self)

    def previous(self):
        return _medfield.SwigPyIterator_medfield_module_previous(self)

    def advance(self, n):
        return _medfield.SwigPyIterator_medfield_module_advance(self, n)

    def __eq__(self, x):
        return _medfield.SwigPyIterator_medfield_module___eq__(self, x)

    def __ne__(self, x):
        return _medfield.SwigPyIterator_medfield_module___ne__(self, x)

    def __iadd__(self, n):
        return _medfield.SwigPyIterator_medfield_module___iadd__(self, n)

    def __isub__(self, n):
        return _medfield.SwigPyIterator_medfield_module___isub__(self, n)

    def __add__(self, n):
        return _medfield.SwigPyIterator_medfield_module___add__(self, n)

    def __sub__(self, *args):
        return _medfield.SwigPyIterator_medfield_module___sub__(self, *args)
    def __iter__(self): return self
    def __iter__(self):
        return self

# Register SwigPyIterator_medfield_module in _medfield:
_medfield.SwigPyIterator_medfield_module_swigregister(SwigPyIterator_medfield_module)

ABSOLUTE_H5IPUBLIC_H = _medfield.ABSOLUTE_H5IPUBLIC_H
ABSOLUTE_H5PUBLIC_H = _medfield.ABSOLUTE_H5PUBLIC_H
HAVE_CC_C99 = _medfield.HAVE_CC_C99
HAVE_CUSERID = _medfield.HAVE_CUSERID
HAVE_DLFCN_H = _medfield.HAVE_DLFCN_H
HAVE_FTIME = _medfield.HAVE_FTIME
HAVE_GETEUID = _medfield.HAVE_GETEUID
HAVE_GETPWUID = _medfield.HAVE_GETPWUID
HAVE_GETTIMEOFDAY = _medfield.HAVE_GETTIMEOFDAY
HAVE_H5IPUBLIC_H = _medfield.HAVE_H5IPUBLIC_H
HAVE_H5PUBLIC_H = _medfield.HAVE_H5PUBLIC_H
HAVE_INTTYPES_H = _medfield.HAVE_INTTYPES_H
HAVE_LIBHDF5 = _medfield.HAVE_LIBHDF5
HAVE_MALLOC_H = _medfield.HAVE_MALLOC_H
HAVE_PWD_H = _medfield.HAVE_PWD_H
HAVE_PYTHON = _medfield.HAVE_PYTHON
HAVE_STDBOOL_H = _medfield.HAVE_STDBOOL_H
HAVE_STDINT_H = _medfield.HAVE_STDINT_H
HAVE_STDIO_H = _medfield.HAVE_STDIO_H
HAVE_STDLIB_H = _medfield.HAVE_STDLIB_H
HAVE_STRINGS_H = _medfield.HAVE_STRINGS_H
HAVE_STRING_H = _medfield.HAVE_STRING_H
HAVE_SYS_STAT_H = _medfield.HAVE_SYS_STAT_H
HAVE_SYS_TIMEB_H = _medfield.HAVE_SYS_TIMEB_H
HAVE_SYS_TIME_H = _medfield.HAVE_SYS_TIME_H
HAVE_SYS_TYPES_H = _medfield.HAVE_SYS_TYPES_H
HAVE_UNISTD_H = _medfield.HAVE_UNISTD_H
HAVE__BOOL = _medfield.HAVE__BOOL
LT_OBJDIR = _medfield.LT_OBJDIR
MED_API_23 = _medfield.MED_API_23
MED_CHECK_23FORMAT = _medfield.MED_CHECK_23FORMAT
MED_HAVE_FORTRAN = _medfield.MED_HAVE_FORTRAN
MED_HAVE_PYTHON = _medfield.MED_HAVE_PYTHON
MESGERR = _medfield.MESGERR
PACKAGE = _medfield.PACKAGE
PACKAGE_BUGREPORT = _medfield.PACKAGE_BUGREPORT
PACKAGE_NAME = _medfield.PACKAGE_NAME
PACKAGE_STRING = _medfield.PACKAGE_STRING
PACKAGE_TARNAME = _medfield.PACKAGE_TARNAME
PACKAGE_URL = _medfield.PACKAGE_URL
PACKAGE_VERSION = _medfield.PACKAGE_VERSION
SIZEOF_FORTRAN_INTEGER = _medfield.SIZEOF_FORTRAN_INTEGER
SIZEOF_FORTRAN_INTEGERp8 = _medfield.SIZEOF_FORTRAN_INTEGERp8
SIZEOF_HID_T = _medfield.SIZEOF_HID_T
SIZEOF_INT = _medfield.SIZEOF_INT
SIZEOF_LONG = _medfield.SIZEOF_LONG
SIZEOF_LONG_LONG = _medfield.SIZEOF_LONG_LONG
STDC_HEADERS = _medfield.STDC_HEADERS
VERSION = _medfield.VERSION
HDF_VERSION_REF = _medfield.HDF_VERSION_REF
HDF_VERSION_MAJOR_REF = _medfield.HDF_VERSION_MAJOR_REF
HDF_VERSION_MINOR_REF = _medfield.HDF_VERSION_MINOR_REF
HDF_VERSION_RELEASE_REF = _medfield.HDF_VERSION_RELEASE_REF
HDF_VERSION_NUM_REF = _medfield.HDF_VERSION_NUM_REF
H5F_LIBVER_18 = _medfield.H5F_LIBVER_18
MED_MAJOR_NUM = _medfield.MED_MAJOR_NUM
MED_MINOR_NUM = _medfield.MED_MINOR_NUM
MED_RELEASE_NUM = _medfield.MED_RELEASE_NUM
MED_3_LATEST_MINOR = _medfield.MED_3_LATEST_MINOR
MED_4_LATEST_MINOR = _medfield.MED_4_LATEST_MINOR
MED_40_LATEST_RELEASE = _medfield.MED_40_LATEST_RELEASE
MED_NUM_MAJEUR = _medfield.MED_NUM_MAJEUR
MED_NUM_MINEUR = _medfield.MED_NUM_MINEUR
MED_NUM_RELEASE = _medfield.MED_NUM_RELEASE
MED_VERSION_STR = _medfield.MED_VERSION_STR
MED_MAX_PARA = _medfield.MED_MAX_PARA
MED_COMMENT_SIZE = _medfield.MED_COMMENT_SIZE
MED_IDENT_SIZE = _medfield.MED_IDENT_SIZE
MED_NAME_SIZE = _medfield.MED_NAME_SIZE
MED_SNAME_SIZE = _medfield.MED_SNAME_SIZE
MED_LNAME_SIZE = _medfield.MED_LNAME_SIZE
MED_SNAME_BLANK = _medfield.MED_SNAME_BLANK
MED_NAME_BLANK = _medfield.MED_NAME_BLANK
MED_PATHNAME_SIZE = _medfield.MED_PATHNAME_SIZE
MED_MAX_CHFID_PATH = _medfield.MED_MAX_CHFID_PATH
MED_FULL_INTERLACE = _medfield.MED_FULL_INTERLACE
MED_NO_INTERLACE = _medfield.MED_NO_INTERLACE
MED_UNDEF_INTERLACE = _medfield.MED_UNDEF_INTERLACE
MED_UNDEF_STMODE = _medfield.MED_UNDEF_STMODE
MED_GLOBAL_STMODE = _medfield.MED_GLOBAL_STMODE
MED_COMPACT_STMODE = _medfield.MED_COMPACT_STMODE
MED_GLOBAL_PFLMODE = _medfield.MED_GLOBAL_PFLMODE
MED_COMPACT_PFLMODE = _medfield.MED_COMPACT_PFLMODE
MED_UNDEF_PFLMODE = _medfield.MED_UNDEF_PFLMODE
MED_ACC_RDONLY = _medfield.MED_ACC_RDONLY
MED_ACC_RDWR = _medfield.MED_ACC_RDWR
MED_ACC_RDEXT = _medfield.MED_ACC_RDEXT
MED_ACC_CREAT = _medfield.MED_ACC_CREAT
MED_ACC_UNDEF = _medfield.MED_ACC_UNDEF
MED_UNSTRUCTURED_MESH = _medfield.MED_UNSTRUCTURED_MESH
MED_STRUCTURED_MESH = _medfield.MED_STRUCTURED_MESH
MED_UNDEF_MESH_TYPE = _medfield.MED_UNDEF_MESH_TYPE
MED_CARTESIAN_GRID = _medfield.MED_CARTESIAN_GRID
MED_POLAR_GRID = _medfield.MED_POLAR_GRID
MED_CURVILINEAR_GRID = _medfield.MED_CURVILINEAR_GRID
MED_UNDEF_GRID_TYPE = _medfield.MED_UNDEF_GRID_TYPE
MED_CELL = _medfield.MED_CELL
MED_DESCENDING_FACE = _medfield.MED_DESCENDING_FACE
MED_DESCENDING_EDGE = _medfield.MED_DESCENDING_EDGE
MED_NODE = _medfield.MED_NODE
MED_NODE_ELEMENT = _medfield.MED_NODE_ELEMENT
MED_STRUCT_ELEMENT = _medfield.MED_STRUCT_ELEMENT
MED_ALL_ENTITY_TYPE = _medfield.MED_ALL_ENTITY_TYPE
MED_UNDEF_ENTITY_TYPE = _medfield.MED_UNDEF_ENTITY_TYPE
MED_N_ENTITY_TYPES = _medfield.MED_N_ENTITY_TYPES
MED_COORDINATE = _medfield.MED_COORDINATE
MED_CONNECTIVITY = _medfield.MED_CONNECTIVITY
MED_NAME = _medfield.MED_NAME
MED_NUMBER = _medfield.MED_NUMBER
MED_FAMILY_NUMBER = _medfield.MED_FAMILY_NUMBER
MED_COORDINATE_AXIS1 = _medfield.MED_COORDINATE_AXIS1
MED_COORDINATE_AXIS2 = _medfield.MED_COORDINATE_AXIS2
MED_COORDINATE_AXIS3 = _medfield.MED_COORDINATE_AXIS3
MED_INDEX_FACE = _medfield.MED_INDEX_FACE
MED_INDEX_NODE = _medfield.MED_INDEX_NODE
MED_GLOBAL_NUMBER = _medfield.MED_GLOBAL_NUMBER
MED_VARIABLE_ATTRIBUTE = _medfield.MED_VARIABLE_ATTRIBUTE
MED_COORDINATE_TRSF = _medfield.MED_COORDINATE_TRSF
MED_UNDEF_DATATYPE = _medfield.MED_UNDEF_DATATYPE
MED_INTERNAL_FLOAT32 = _medfield.MED_INTERNAL_FLOAT32
MED_INTERNAL_FLOAT64 = _medfield.MED_INTERNAL_FLOAT64
MED_INTERNAL_INT8 = _medfield.MED_INTERNAL_INT8
MED_INTERNAL_INT32 = _medfield.MED_INTERNAL_INT32
MED_INTERNAL_INT64 = _medfield.MED_INTERNAL_INT64
MED_INTERNAL_INT = _medfield.MED_INTERNAL_INT
MED_INTERNAL_NAME = _medfield.MED_INTERNAL_NAME
MED_INTERNAL_SNAME = _medfield.MED_INTERNAL_SNAME
MED_INTERNAL_LNAME = _medfield.MED_INTERNAL_LNAME
MED_INTERNAL_IDENT = _medfield.MED_INTERNAL_IDENT
MED_INTERNAL_CHAR = _medfield.MED_INTERNAL_CHAR
MED_INTERNAL_UNDEF = _medfield.MED_INTERNAL_UNDEF
MED_DOUBLE = _medfield.MED_DOUBLE
MED_FLOAT64 = _medfield.MED_FLOAT64
MED_FLOAT32 = _medfield.MED_FLOAT32
MED_INT32 = _medfield.MED_INT32
MED_INT64 = _medfield.MED_INT64
MED_INT = _medfield.MED_INT
MED_ATT_FLOAT64 = _medfield.MED_ATT_FLOAT64
MED_ATT_INT = _medfield.MED_ATT_INT
MED_ATT_NAME = _medfield.MED_ATT_NAME
MED_ATT_UNDEF = _medfield.MED_ATT_UNDEF
MED_MESH = _medfield.MED_MESH
MED_FIELD = _medfield.MED_FIELD
MED_LIBRARY = _medfield.MED_LIBRARY
MED_FILE = _medfield.MED_FILE
MED_MESH_SUPPORT = _medfield.MED_MESH_SUPPORT
MED_ELSTRUCT = _medfield.MED_ELSTRUCT
MED_FAMILY = _medfield.MED_FAMILY
MED_EQUIVALENCE = _medfield.MED_EQUIVALENCE
MED_GROUP = _medfield.MED_GROUP
MED_JOINT = _medfield.MED_JOINT
MED_LOCALIZATION = _medfield.MED_LOCALIZATION
MED_PROFILE = _medfield.MED_PROFILE
MED_FILTER = _medfield.MED_FILTER
MED_INTERPOLATION = _medfield.MED_INTERPOLATION
MED_NUMERICAL_DATA = _medfield.MED_NUMERICAL_DATA
MED_LINK = _medfield.MED_LINK
MED_CLASS_UNDEF = _medfield.MED_CLASS_UNDEF
MED_CLASS_ALL = _medfield.MED_CLASS_ALL
MED_POINT1 = _medfield.MED_POINT1
MED_SEG2 = _medfield.MED_SEG2
MED_SEG3 = _medfield.MED_SEG3
MED_SEG4 = _medfield.MED_SEG4
MED_TRIA3 = _medfield.MED_TRIA3
MED_QUAD4 = _medfield.MED_QUAD4
MED_TRIA6 = _medfield.MED_TRIA6
MED_TRIA7 = _medfield.MED_TRIA7
MED_QUAD8 = _medfield.MED_QUAD8
MED_QUAD9 = _medfield.MED_QUAD9
MED_TETRA4 = _medfield.MED_TETRA4
MED_PYRA5 = _medfield.MED_PYRA5
MED_PENTA6 = _medfield.MED_PENTA6
MED_HEXA8 = _medfield.MED_HEXA8
MED_TETRA10 = _medfield.MED_TETRA10
MED_OCTA12 = _medfield.MED_OCTA12
MED_PYRA13 = _medfield.MED_PYRA13
MED_PENTA15 = _medfield.MED_PENTA15
MED_PENTA18 = _medfield.MED_PENTA18
MED_HEXA20 = _medfield.MED_HEXA20
MED_HEXA27 = _medfield.MED_HEXA27
MED_POLYGON = _medfield.MED_POLYGON
MED_POLYGON2 = _medfield.MED_POLYGON2
MED_POLYHEDRON = _medfield.MED_POLYHEDRON
MED_STRUCT_GEO_INTERNAL = _medfield.MED_STRUCT_GEO_INTERNAL
MED_STRUCT_GEO_SUP_INTERNAL = _medfield.MED_STRUCT_GEO_SUP_INTERNAL
MED_NONE = _medfield.MED_NONE
MED_NO_GEOTYPE = _medfield.MED_NO_GEOTYPE
MED_UNDEF_GEOTYPE = _medfield.MED_UNDEF_GEOTYPE
MED_UNDEF_GEOMETRY_TYPE = _medfield.MED_UNDEF_GEOMETRY_TYPE
MED_ALL_GEOTYPE = _medfield.MED_ALL_GEOTYPE
MED_GEO_ALL = _medfield.MED_GEO_ALL
MED_N_CELL_GEO = _medfield.MED_N_CELL_GEO
MED_N_CELL_FIXED_GEO = _medfield.MED_N_CELL_FIXED_GEO
MED_N_CELL_GEO_FIXED_CON = _medfield.MED_N_CELL_GEO_FIXED_CON
MED_N_FACE_GEO = _medfield.MED_N_FACE_GEO
MED_N_FACE_FIXED_GEO = _medfield.MED_N_FACE_FIXED_GEO
MED_N_FACE_GEO_FIXED_CON = _medfield.MED_N_FACE_GEO_FIXED_CON
MED_N_EDGE_TYPES = _medfield.MED_N_EDGE_TYPES
MED_N_EDGE_FIXED_GEO = _medfield.MED_N_EDGE_FIXED_GEO
MED_N_EDGE_GEO_FIXED_CON = _medfield.MED_N_EDGE_GEO_FIXED_CON
MED_N_NODE_GEO = _medfield.MED_N_NODE_GEO
MED_N_NODE_FIXED_GEO = _medfield.MED_N_NODE_FIXED_GEO
MED_N_NODE_GEO_FIXED_CON = _medfield.MED_N_NODE_GEO_FIXED_CON
MED_NODAL = _medfield.MED_NODAL
MED_DESCENDING = _medfield.MED_DESCENDING
MED_UNDEF_CONNECTIVITY_MODE = _medfield.MED_UNDEF_CONNECTIVITY_MODE
MED_NO_CMODE = _medfield.MED_NO_CMODE
MED_CARTESIAN = _medfield.MED_CARTESIAN
MED_CYLINDRICAL = _medfield.MED_CYLINDRICAL
MED_SPHERICAL = _medfield.MED_SPHERICAL
MED_UNDEF_AXIS_TYPE = _medfield.MED_UNDEF_AXIS_TYPE
MED_FALSE = _medfield.MED_FALSE
MED_TRUE = _medfield.MED_TRUE
MED_GAUSS_ELNO = _medfield.MED_GAUSS_ELNO
MED_IPOINT_ELNO = _medfield.MED_IPOINT_ELNO
MED_NO_NAME = _medfield.MED_NO_NAME
MED_NO_MESHNAME = _medfield.MED_NO_MESHNAME
MED_NO_MESH = _medfield.MED_NO_MESH
MED_NO_MESH_SUPPORT = _medfield.MED_NO_MESH_SUPPORT
MED_NO_LOCALIZATION = _medfield.MED_NO_LOCALIZATION
MED_NO_INTERPOLATION = _medfield.MED_NO_INTERPOLATION
MED_NO_IPOINT_INTERNAL = _medfield.MED_NO_IPOINT_INTERNAL
MED_NO_PROFILE = _medfield.MED_NO_PROFILE
MED_NO_GROUP = _medfield.MED_NO_GROUP
MED_ALLENTITIES_PROFILE = _medfield.MED_ALLENTITIES_PROFILE
MED_NO_PROFILE_INTERNAL = _medfield.MED_NO_PROFILE_INTERNAL
MED_SAME_PROFILE_INTERNAL = _medfield.MED_SAME_PROFILE_INTERNAL
MED_ALL_CONSTITUENT = _medfield.MED_ALL_CONSTITUENT
MED_UNDEF_SIZE = _medfield.MED_UNDEF_SIZE
MED_NO_PROFILE_SIZE = _medfield.MED_NO_PROFILE_SIZE
MED_SORT_DTIT = _medfield.MED_SORT_DTIT
MED_SORT_ITDT = _medfield.MED_SORT_ITDT
MED_SORT_UNDEF = _medfield.MED_SORT_UNDEF
MED_ALL_DT = _medfield.MED_ALL_DT
MED_ALL_IT = _medfield.MED_ALL_IT
MED_NO_DT = _medfield.MED_NO_DT
MED_NO_IT = _medfield.MED_NO_IT
MED_UNDEF_DT = _medfield.MED_UNDEF_DT
MED_ATT_NOT_FILLED = _medfield.MED_ATT_NOT_FILLED
MED_MAX_FILTER_SPACES = _medfield.MED_MAX_FILTER_SPACES
class med_filter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nspaces = property(_medfield.med_filter_nspaces_get, _medfield.med_filter_nspaces_set)
    memspace = property(_medfield.med_filter_memspace_get, _medfield.med_filter_memspace_set)
    diskspace = property(_medfield.med_filter_diskspace_get, _medfield.med_filter_diskspace_set)
    nentity = property(_medfield.med_filter_nentity_get, _medfield.med_filter_nentity_set)
    nvaluesperentity = property(_medfield.med_filter_nvaluesperentity_get, _medfield.med_filter_nvaluesperentity_set)
    nconstituentpervalue = property(_medfield.med_filter_nconstituentpervalue_get, _medfield.med_filter_nconstituentpervalue_set)
    constituentselect = property(_medfield.med_filter_constituentselect_get, _medfield.med_filter_constituentselect_set)
    switchmode = property(_medfield.med_filter_switchmode_get, _medfield.med_filter_switchmode_set)
    filterarraysize = property(_medfield.med_filter_filterarraysize_get, _medfield.med_filter_filterarraysize_set)
    filterarray23v30 = property(_medfield.med_filter_filterarray23v30_get, _medfield.med_filter_filterarray23v30_set)
    profilearraysize = property(_medfield.med_filter_profilearraysize_get, _medfield.med_filter_profilearraysize_set)
    storagemode = property(_medfield.med_filter_storagemode_get, _medfield.med_filter_storagemode_set)
    profilename = property(_medfield.med_filter_profilename_get, _medfield.med_filter_profilename_set)

    def __init__(self):
        r"""__init__(self) -> med_filter"""
        _medfield.med_filter_swiginit(self, _medfield.new_med_filter())
    __swig_destroy__ = _medfield.delete_med_filter

# Register med_filter in _medfield:
_medfield.med_filter_swigregister(med_filter)

MED_NO_FILTER_SIZE = _medfield.MED_NO_FILTER_SIZE
MED_NO_PROFILE_F = _medfield.MED_NO_PROFILE_F
class med_file_version(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    majeur = property(_medfield.med_file_version_majeur_get, _medfield.med_file_version_majeur_set)
    mineur = property(_medfield.med_file_version_mineur_get, _medfield.med_file_version_mineur_set)
    release = property(_medfield.med_file_version_release_get, _medfield.med_file_version_release_set)

    def __init__(self):
        r"""__init__(self) -> med_file_version"""
        _medfield.med_file_version_swiginit(self, _medfield.new_med_file_version())
    __swig_destroy__ = _medfield.delete_med_file_version

# Register med_file_version in _medfield:
_medfield.med_file_version_swigregister(med_file_version)

class med_memfile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    app_image_ptr = property(_medfield.med_memfile_app_image_ptr_get, _medfield.med_memfile_app_image_ptr_set)
    app_image_size = property(_medfield.med_memfile_app_image_size_get, _medfield.med_memfile_app_image_size_set)
    ref_count = property(_medfield.med_memfile_ref_count_get, _medfield.med_memfile_ref_count_set)
    fapl_image_ptr = property(_medfield.med_memfile_fapl_image_ptr_get, _medfield.med_memfile_fapl_image_ptr_set)
    fapl_image_size = property(_medfield.med_memfile_fapl_image_size_get, _medfield.med_memfile_fapl_image_size_set)
    fapl_ref_count = property(_medfield.med_memfile_fapl_ref_count_get, _medfield.med_memfile_fapl_ref_count_set)
    vfd_image_ptr = property(_medfield.med_memfile_vfd_image_ptr_get, _medfield.med_memfile_vfd_image_ptr_set)
    vfd_image_size = property(_medfield.med_memfile_vfd_image_size_get, _medfield.med_memfile_vfd_image_size_set)
    vfd_ref_count = property(_medfield.med_memfile_vfd_ref_count_get, _medfield.med_memfile_vfd_ref_count_set)
    flags = property(_medfield.med_memfile_flags_get, _medfield.med_memfile_flags_set)

    def __init__(self):
        r"""__init__(self) -> med_memfile"""
        _medfield.med_memfile_swiginit(self, _medfield.new_med_memfile())
    __swig_destroy__ = _medfield.delete_med_memfile

# Register med_memfile in _medfield:
_medfield.med_memfile_swigregister(med_memfile)


def MEDgetEntityTypeIt(entitytype):
    return _medfield.MEDgetEntityTypeIt(entitytype)

def MEDgetCellGeometryTypeIt(geotype):
    return _medfield.MEDgetCellGeometryTypeIt(geotype)

def MEDgetFaceGeometryTypeIt(geotype):
    return _medfield.MEDgetFaceGeometryTypeIt(geotype)

def MEDgetEdgeGeometryTypeIt(geotype):
    return _medfield.MEDgetEdgeGeometryTypeIt(geotype)

def MEDgetNodeGeometryTypeIt(geotype):
    return _medfield.MEDgetNodeGeometryTypeIt(geotype)

def MEDgetEntityGeometryTypeIt(entitytype, geotype):
    return _medfield.MEDgetEntityGeometryTypeIt(entitytype, geotype)

def MEDgetGeometryTypeName(geotype):
    return _medfield.MEDgetGeometryTypeName(geotype)

def MEDgetEntityTypeName(entitytype):
    return _medfield.MEDgetEntityTypeName(entitytype)
MED_PARTICLE_NAME = _medfield.MED_PARTICLE_NAME
MED_BALL_NAME = _medfield.MED_BALL_NAME
MED_BEAM_NAME = _medfield.MED_BEAM_NAME
MED_PARTICLE_LABEL = _medfield.MED_PARTICLE_LABEL
MED_BALL_DIAMETER = _medfield.MED_BALL_DIAMETER
MED_BEAM_THICKNESS = _medfield.MED_BEAM_THICKNESS
import med.medenum
class MEDBOOL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _medfield.MEDBOOL_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medfield.MEDBOOL___nonzero__(self)

    def __bool__(self):
        return _medfield.MEDBOOL___bool__(self)

    def __len__(self):
        return _medfield.MEDBOOL___len__(self)

    def __getslice__(self, i, j):
        return _medfield.MEDBOOL___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medfield.MEDBOOL___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medfield.MEDBOOL___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medfield.MEDBOOL___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medfield.MEDBOOL___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medfield.MEDBOOL___setitem__(self, *args)

    def pop(self):
        return _medfield.MEDBOOL_pop(self)

    def append(self, x):
        return _medfield.MEDBOOL_append(self, x)

    def empty(self):
        return _medfield.MEDBOOL_empty(self)

    def size(self):
        return _medfield.MEDBOOL_size(self)

    def swap(self, v):
        return _medfield.MEDBOOL_swap(self, v)

    def begin(self):
        return _medfield.MEDBOOL_begin(self)

    def end(self):
        return _medfield.MEDBOOL_end(self)

    def rbegin(self):
        return _medfield.MEDBOOL_rbegin(self)

    def rend(self):
        return _medfield.MEDBOOL_rend(self)

    def clear(self):
        return _medfield.MEDBOOL_clear(self)

    def get_allocator(self):
        return _medfield.MEDBOOL_get_allocator(self)

    def pop_back(self):
        return _medfield.MEDBOOL_pop_back(self)

    def erase(self, *args):
        return _medfield.MEDBOOL_erase(self, *args)

    def __init__(self, *args):
        _medfield.MEDBOOL_swiginit(self, _medfield.new_MEDBOOL(*args))

    def push_back(self, x):
        return _medfield.MEDBOOL_push_back(self, x)

    def front(self):
        return _medfield.MEDBOOL_front(self)

    def back(self):
        return _medfield.MEDBOOL_back(self)

    def assign(self, n, x):
        return _medfield.MEDBOOL_assign(self, n, x)

    def resize(self, *args):
        return _medfield.MEDBOOL_resize(self, *args)

    def insert(self, *args):
        return _medfield.MEDBOOL_insert(self, *args)

    def reserve(self, n):
        return _medfield.MEDBOOL_reserve(self, n)

    def capacity(self):
        return _medfield.MEDBOOL_capacity(self)
    __swig_destroy__ = _medfield.delete_MEDBOOL

# Register MEDBOOL in _medfield:
_medfield.MEDBOOL_swigregister(MEDBOOL)
cvar = _medfield.cvar
MED_GET_ENTITY_TYPENAME = cvar.MED_GET_ENTITY_TYPENAME
MED_GET_CELL_GEOMETRY_TYPENAME = cvar.MED_GET_CELL_GEOMETRY_TYPENAME
MED_GET_FACE_GEOMETRY_TYPENAME = cvar.MED_GET_FACE_GEOMETRY_TYPENAME
MED_GET_CELL_GEOMETRY_TYPE_FROM_ENTITY_TYPE = cvar.MED_GET_CELL_GEOMETRY_TYPE_FROM_ENTITY_TYPE
MED_GET_N_FIXED_GEO_FOR_ENTITY_TYPE_IT = cvar.MED_GET_N_FIXED_GEO_FOR_ENTITY_TYPE_IT


MEDBOOL.__str__= lambda self: str([x for x in self])
MEDBOOL.__repr__= lambda self: "MEDBOOL("+str([x for x in self])+")"

class MEDFLOAT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _medfield.MEDFLOAT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medfield.MEDFLOAT___nonzero__(self)

    def __bool__(self):
        return _medfield.MEDFLOAT___bool__(self)

    def __len__(self):
        return _medfield.MEDFLOAT___len__(self)

    def __getslice__(self, i, j):
        return _medfield.MEDFLOAT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medfield.MEDFLOAT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medfield.MEDFLOAT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medfield.MEDFLOAT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medfield.MEDFLOAT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medfield.MEDFLOAT___setitem__(self, *args)

    def pop(self):
        return _medfield.MEDFLOAT_pop(self)

    def append(self, x):
        return _medfield.MEDFLOAT_append(self, x)

    def empty(self):
        return _medfield.MEDFLOAT_empty(self)

    def size(self):
        return _medfield.MEDFLOAT_size(self)

    def swap(self, v):
        return _medfield.MEDFLOAT_swap(self, v)

    def begin(self):
        return _medfield.MEDFLOAT_begin(self)

    def end(self):
        return _medfield.MEDFLOAT_end(self)

    def rbegin(self):
        return _medfield.MEDFLOAT_rbegin(self)

    def rend(self):
        return _medfield.MEDFLOAT_rend(self)

    def clear(self):
        return _medfield.MEDFLOAT_clear(self)

    def get_allocator(self):
        return _medfield.MEDFLOAT_get_allocator(self)

    def pop_back(self):
        return _medfield.MEDFLOAT_pop_back(self)

    def erase(self, *args):
        return _medfield.MEDFLOAT_erase(self, *args)

    def __init__(self, *args):
        _medfield.MEDFLOAT_swiginit(self, _medfield.new_MEDFLOAT(*args))

    def push_back(self, x):
        return _medfield.MEDFLOAT_push_back(self, x)

    def front(self):
        return _medfield.MEDFLOAT_front(self)

    def back(self):
        return _medfield.MEDFLOAT_back(self)

    def assign(self, n, x):
        return _medfield.MEDFLOAT_assign(self, n, x)

    def resize(self, *args):
        return _medfield.MEDFLOAT_resize(self, *args)

    def insert(self, *args):
        return _medfield.MEDFLOAT_insert(self, *args)

    def reserve(self, n):
        return _medfield.MEDFLOAT_reserve(self, n)

    def capacity(self):
        return _medfield.MEDFLOAT_capacity(self)

    def __iadd__(self, value):
        return _medfield.MEDFLOAT___iadd__(self, value)

    def __add__(self, value):
        return _medfield.MEDFLOAT___add__(self, value)

    def __isub__(self, value):
        return _medfield.MEDFLOAT___isub__(self, value)

    def __sub__(self, value):
        return _medfield.MEDFLOAT___sub__(self, value)

    def __imul__(self, value):
        return _medfield.MEDFLOAT___imul__(self, value)

    def __mul__(self, value):
        return _medfield.MEDFLOAT___mul__(self, value)

    def __itruediv__(self, *args):
        return _medfield.MEDFLOAT___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medfield.MEDFLOAT___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medfield.MEDFLOAT___le__(self, value)

    def __lt__(self, value):
        return _medfield.MEDFLOAT___lt__(self, value)

    def __gt__(self, value):
        return _medfield.MEDFLOAT___gt__(self, value)

    def __ge__(self, value):
        return _medfield.MEDFLOAT___ge__(self, value)

    def __eq__(self, value):
        return _medfield.MEDFLOAT___eq__(self, value)

    def __ne__(self, value):
        return _medfield.MEDFLOAT___ne__(self, value)
    __swig_destroy__ = _medfield.delete_MEDFLOAT

# Register MEDFLOAT in _medfield:
_medfield.MEDFLOAT_swigregister(MEDFLOAT)


MEDFLOAT.__str__= lambda self: str([x for x in self])
MEDFLOAT.__repr__= lambda self:"MEDFLOAT" +"("+str([x for x in self])+")"


MEDFLOAT64=MEDFLOAT
MEDDOUBLE=MEDFLOAT

class MEDFLOAT32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _medfield.MEDFLOAT32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medfield.MEDFLOAT32___nonzero__(self)

    def __bool__(self):
        return _medfield.MEDFLOAT32___bool__(self)

    def __len__(self):
        return _medfield.MEDFLOAT32___len__(self)

    def __getslice__(self, i, j):
        return _medfield.MEDFLOAT32___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medfield.MEDFLOAT32___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medfield.MEDFLOAT32___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medfield.MEDFLOAT32___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medfield.MEDFLOAT32___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medfield.MEDFLOAT32___setitem__(self, *args)

    def pop(self):
        return _medfield.MEDFLOAT32_pop(self)

    def append(self, x):
        return _medfield.MEDFLOAT32_append(self, x)

    def empty(self):
        return _medfield.MEDFLOAT32_empty(self)

    def size(self):
        return _medfield.MEDFLOAT32_size(self)

    def swap(self, v):
        return _medfield.MEDFLOAT32_swap(self, v)

    def begin(self):
        return _medfield.MEDFLOAT32_begin(self)

    def end(self):
        return _medfield.MEDFLOAT32_end(self)

    def rbegin(self):
        return _medfield.MEDFLOAT32_rbegin(self)

    def rend(self):
        return _medfield.MEDFLOAT32_rend(self)

    def clear(self):
        return _medfield.MEDFLOAT32_clear(self)

    def get_allocator(self):
        return _medfield.MEDFLOAT32_get_allocator(self)

    def pop_back(self):
        return _medfield.MEDFLOAT32_pop_back(self)

    def erase(self, *args):
        return _medfield.MEDFLOAT32_erase(self, *args)

    def __init__(self, *args):
        _medfield.MEDFLOAT32_swiginit(self, _medfield.new_MEDFLOAT32(*args))

    def push_back(self, x):
        return _medfield.MEDFLOAT32_push_back(self, x)

    def front(self):
        return _medfield.MEDFLOAT32_front(self)

    def back(self):
        return _medfield.MEDFLOAT32_back(self)

    def assign(self, n, x):
        return _medfield.MEDFLOAT32_assign(self, n, x)

    def resize(self, *args):
        return _medfield.MEDFLOAT32_resize(self, *args)

    def insert(self, *args):
        return _medfield.MEDFLOAT32_insert(self, *args)

    def reserve(self, n):
        return _medfield.MEDFLOAT32_reserve(self, n)

    def capacity(self):
        return _medfield.MEDFLOAT32_capacity(self)

    def __iadd__(self, value):
        return _medfield.MEDFLOAT32___iadd__(self, value)

    def __add__(self, value):
        return _medfield.MEDFLOAT32___add__(self, value)

    def __isub__(self, value):
        return _medfield.MEDFLOAT32___isub__(self, value)

    def __sub__(self, value):
        return _medfield.MEDFLOAT32___sub__(self, value)

    def __imul__(self, value):
        return _medfield.MEDFLOAT32___imul__(self, value)

    def __mul__(self, value):
        return _medfield.MEDFLOAT32___mul__(self, value)

    def __itruediv__(self, *args):
        return _medfield.MEDFLOAT32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medfield.MEDFLOAT32___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medfield.MEDFLOAT32___le__(self, value)

    def __lt__(self, value):
        return _medfield.MEDFLOAT32___lt__(self, value)

    def __gt__(self, value):
        return _medfield.MEDFLOAT32___gt__(self, value)

    def __ge__(self, value):
        return _medfield.MEDFLOAT32___ge__(self, value)

    def __eq__(self, value):
        return _medfield.MEDFLOAT32___eq__(self, value)

    def __ne__(self, value):
        return _medfield.MEDFLOAT32___ne__(self, value)
    __swig_destroy__ = _medfield.delete_MEDFLOAT32

# Register MEDFLOAT32 in _medfield:
_medfield.MEDFLOAT32_swigregister(MEDFLOAT32)


MEDFLOAT32.__str__= lambda self: str([x for x in self])
MEDFLOAT32.__repr__= lambda self:"MEDFLOAT32" +"("+str([x for x in self])+")"

class MEDINT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _medfield.MEDINT_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medfield.MEDINT___nonzero__(self)

    def __bool__(self):
        return _medfield.MEDINT___bool__(self)

    def __len__(self):
        return _medfield.MEDINT___len__(self)

    def __getslice__(self, i, j):
        return _medfield.MEDINT___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medfield.MEDINT___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medfield.MEDINT___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medfield.MEDINT___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medfield.MEDINT___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medfield.MEDINT___setitem__(self, *args)

    def pop(self):
        return _medfield.MEDINT_pop(self)

    def append(self, x):
        return _medfield.MEDINT_append(self, x)

    def empty(self):
        return _medfield.MEDINT_empty(self)

    def size(self):
        return _medfield.MEDINT_size(self)

    def swap(self, v):
        return _medfield.MEDINT_swap(self, v)

    def begin(self):
        return _medfield.MEDINT_begin(self)

    def end(self):
        return _medfield.MEDINT_end(self)

    def rbegin(self):
        return _medfield.MEDINT_rbegin(self)

    def rend(self):
        return _medfield.MEDINT_rend(self)

    def clear(self):
        return _medfield.MEDINT_clear(self)

    def get_allocator(self):
        return _medfield.MEDINT_get_allocator(self)

    def pop_back(self):
        return _medfield.MEDINT_pop_back(self)

    def erase(self, *args):
        return _medfield.MEDINT_erase(self, *args)

    def __init__(self, *args):
        _medfield.MEDINT_swiginit(self, _medfield.new_MEDINT(*args))

    def push_back(self, x):
        return _medfield.MEDINT_push_back(self, x)

    def front(self):
        return _medfield.MEDINT_front(self)

    def back(self):
        return _medfield.MEDINT_back(self)

    def assign(self, n, x):
        return _medfield.MEDINT_assign(self, n, x)

    def resize(self, *args):
        return _medfield.MEDINT_resize(self, *args)

    def insert(self, *args):
        return _medfield.MEDINT_insert(self, *args)

    def reserve(self, n):
        return _medfield.MEDINT_reserve(self, n)

    def capacity(self):
        return _medfield.MEDINT_capacity(self)

    def __iadd__(self, value):
        return _medfield.MEDINT___iadd__(self, value)

    def __add__(self, value):
        return _medfield.MEDINT___add__(self, value)

    def __isub__(self, value):
        return _medfield.MEDINT___isub__(self, value)

    def __sub__(self, value):
        return _medfield.MEDINT___sub__(self, value)

    def __imul__(self, value):
        return _medfield.MEDINT___imul__(self, value)

    def __mul__(self, value):
        return _medfield.MEDINT___mul__(self, value)

    def __itruediv__(self, *args):
        return _medfield.MEDINT___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medfield.MEDINT___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medfield.MEDINT___le__(self, value)

    def __lt__(self, value):
        return _medfield.MEDINT___lt__(self, value)

    def __gt__(self, value):
        return _medfield.MEDINT___gt__(self, value)

    def __ge__(self, value):
        return _medfield.MEDINT___ge__(self, value)

    def __eq__(self, value):
        return _medfield.MEDINT___eq__(self, value)

    def __ne__(self, value):
        return _medfield.MEDINT___ne__(self, value)
    __swig_destroy__ = _medfield.delete_MEDINT

# Register MEDINT in _medfield:
_medfield.MEDINT_swigregister(MEDINT)


MEDINT.__str__= lambda self: str([x for x in self])
MEDINT.__repr__= lambda self:"MEDINT" +"("+str([x for x in self])+")"


MEDINT64=MEDINT

class MEDINT32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _medfield.MEDINT32_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medfield.MEDINT32___nonzero__(self)

    def __bool__(self):
        return _medfield.MEDINT32___bool__(self)

    def __len__(self):
        return _medfield.MEDINT32___len__(self)

    def __getslice__(self, i, j):
        return _medfield.MEDINT32___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medfield.MEDINT32___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medfield.MEDINT32___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medfield.MEDINT32___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medfield.MEDINT32___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medfield.MEDINT32___setitem__(self, *args)

    def pop(self):
        return _medfield.MEDINT32_pop(self)

    def append(self, x):
        return _medfield.MEDINT32_append(self, x)

    def empty(self):
        return _medfield.MEDINT32_empty(self)

    def size(self):
        return _medfield.MEDINT32_size(self)

    def swap(self, v):
        return _medfield.MEDINT32_swap(self, v)

    def begin(self):
        return _medfield.MEDINT32_begin(self)

    def end(self):
        return _medfield.MEDINT32_end(self)

    def rbegin(self):
        return _medfield.MEDINT32_rbegin(self)

    def rend(self):
        return _medfield.MEDINT32_rend(self)

    def clear(self):
        return _medfield.MEDINT32_clear(self)

    def get_allocator(self):
        return _medfield.MEDINT32_get_allocator(self)

    def pop_back(self):
        return _medfield.MEDINT32_pop_back(self)

    def erase(self, *args):
        return _medfield.MEDINT32_erase(self, *args)

    def __init__(self, *args):
        _medfield.MEDINT32_swiginit(self, _medfield.new_MEDINT32(*args))

    def push_back(self, x):
        return _medfield.MEDINT32_push_back(self, x)

    def front(self):
        return _medfield.MEDINT32_front(self)

    def back(self):
        return _medfield.MEDINT32_back(self)

    def assign(self, n, x):
        return _medfield.MEDINT32_assign(self, n, x)

    def resize(self, *args):
        return _medfield.MEDINT32_resize(self, *args)

    def insert(self, *args):
        return _medfield.MEDINT32_insert(self, *args)

    def reserve(self, n):
        return _medfield.MEDINT32_reserve(self, n)

    def capacity(self):
        return _medfield.MEDINT32_capacity(self)

    def __iadd__(self, value):
        return _medfield.MEDINT32___iadd__(self, value)

    def __add__(self, value):
        return _medfield.MEDINT32___add__(self, value)

    def __isub__(self, value):
        return _medfield.MEDINT32___isub__(self, value)

    def __sub__(self, value):
        return _medfield.MEDINT32___sub__(self, value)

    def __imul__(self, value):
        return _medfield.MEDINT32___imul__(self, value)

    def __mul__(self, value):
        return _medfield.MEDINT32___mul__(self, value)

    def __itruediv__(self, *args):
        return _medfield.MEDINT32___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medfield.MEDINT32___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medfield.MEDINT32___le__(self, value)

    def __lt__(self, value):
        return _medfield.MEDINT32___lt__(self, value)

    def __gt__(self, value):
        return _medfield.MEDINT32___gt__(self, value)

    def __ge__(self, value):
        return _medfield.MEDINT32___ge__(self, value)

    def __eq__(self, value):
        return _medfield.MEDINT32___eq__(self, value)

    def __ne__(self, value):
        return _medfield.MEDINT32___ne__(self, value)
    __swig_destroy__ = _medfield.delete_MEDINT32

# Register MEDINT32 in _medfield:
_medfield.MEDINT32_swigregister(MEDINT32)


MEDINT32.__str__= lambda self: str([x for x in self])
MEDINT32.__repr__= lambda self:"MEDINT32" +"("+str([x for x in self])+")"

class MEDCHAR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _medfield.MEDCHAR_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _medfield.MEDCHAR___nonzero__(self)

    def __bool__(self):
        return _medfield.MEDCHAR___bool__(self)

    def __len__(self):
        return _medfield.MEDCHAR___len__(self)

    def __getslice__(self, i, j):
        return _medfield.MEDCHAR___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _medfield.MEDCHAR___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _medfield.MEDCHAR___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _medfield.MEDCHAR___delitem__(self, *args)

    def __getitem__(self, *args):
        return _medfield.MEDCHAR___getitem__(self, *args)

    def __setitem__(self, *args):
        return _medfield.MEDCHAR___setitem__(self, *args)

    def pop(self):
        return _medfield.MEDCHAR_pop(self)

    def append(self, x):
        return _medfield.MEDCHAR_append(self, x)

    def empty(self):
        return _medfield.MEDCHAR_empty(self)

    def size(self):
        return _medfield.MEDCHAR_size(self)

    def swap(self, v):
        return _medfield.MEDCHAR_swap(self, v)

    def begin(self):
        return _medfield.MEDCHAR_begin(self)

    def end(self):
        return _medfield.MEDCHAR_end(self)

    def rbegin(self):
        return _medfield.MEDCHAR_rbegin(self)

    def rend(self):
        return _medfield.MEDCHAR_rend(self)

    def clear(self):
        return _medfield.MEDCHAR_clear(self)

    def get_allocator(self):
        return _medfield.MEDCHAR_get_allocator(self)

    def pop_back(self):
        return _medfield.MEDCHAR_pop_back(self)

    def erase(self, *args):
        return _medfield.MEDCHAR_erase(self, *args)

    def __init__(self, *args):
        _medfield.MEDCHAR_swiginit(self, _medfield.new_MEDCHAR(*args))

    def push_back(self, x):
        return _medfield.MEDCHAR_push_back(self, x)

    def front(self):
        return _medfield.MEDCHAR_front(self)

    def back(self):
        return _medfield.MEDCHAR_back(self)

    def assign(self, n, x):
        return _medfield.MEDCHAR_assign(self, n, x)

    def resize(self, *args):
        return _medfield.MEDCHAR_resize(self, *args)

    def insert(self, *args):
        return _medfield.MEDCHAR_insert(self, *args)

    def reserve(self, n):
        return _medfield.MEDCHAR_reserve(self, n)

    def capacity(self):
        return _medfield.MEDCHAR_capacity(self)

    def __iadd__(self, value):
        return _medfield.MEDCHAR___iadd__(self, value)

    def __add__(self, value):
        return _medfield.MEDCHAR___add__(self, value)

    def __isub__(self, value):
        return _medfield.MEDCHAR___isub__(self, value)

    def __sub__(self, value):
        return _medfield.MEDCHAR___sub__(self, value)

    def __imul__(self, value):
        return _medfield.MEDCHAR___imul__(self, value)

    def __mul__(self, value):
        return _medfield.MEDCHAR___mul__(self, value)

    def __itruediv__(self, *args):
        return _medfield.MEDCHAR___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _medfield.MEDCHAR___truediv__(self, *args)
    __div__ = __truediv__



    def __le__(self, value):
        return _medfield.MEDCHAR___le__(self, value)

    def __lt__(self, value):
        return _medfield.MEDCHAR___lt__(self, value)

    def __gt__(self, value):
        return _medfield.MEDCHAR___gt__(self, value)

    def __ge__(self, value):
        return _medfield.MEDCHAR___ge__(self, value)

    def __eq__(self, value):
        return _medfield.MEDCHAR___eq__(self, value)

    def __ne__(self, value):
        return _medfield.MEDCHAR___ne__(self, value)
    __swig_destroy__ = _medfield.delete_MEDCHAR

# Register MEDCHAR in _medfield:
_medfield.MEDCHAR_swigregister(MEDCHAR)


MEDCHAR.__str__= lambda self: str([x for x in self])
MEDCHAR.__repr__= lambda self:"MEDCHAR" +"("+str([x for x in self])+")"


MEDCHAR.__str__= lambda self: str([x for x in self])
MEDCHAR.__repr__= lambda self:"MEDCHAR" +"("+str([x for x in self])+")"


MEDCHAR.__str__= lambda self: str([x for x in self])
MEDCHAR.__repr__= lambda self:"MEDCHAR" +"("+str([x for x in self])+")"


def MEDfieldCr(fid, fieldname, fieldtype, ncomponent, componentname, componentunit, dtunit, meshname):
    r"""
    MEDfieldCr(fid, fieldname, fieldtype, ncomponent, componentname, componentunit, dtunit, meshname) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    fieldtype: enum med_field_type const
    ncomponent: med_int const
    componentname: char const *const
    componentunit: char const *const
    dtunit: char const *const
    meshname: char const *const

    """
    return _medfield.MEDfieldCr(fid, fieldname, fieldtype, ncomponent, componentname, componentunit, dtunit, meshname)

def MEDfieldValueAdvancedWr(fid, fieldname, numdt, numit, dt, entitype, geotype, localizationname, filter, value):
    r"""
    MEDfieldValueAdvancedWr(fid, fieldname, numdt, numit, dt, entitype, geotype, localizationname, filter, value) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    dt: med_float const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    localizationname: char const *const
    filter: med_filter const *const
    value: unsigned char const *const

    """
    return _medfield.MEDfieldValueAdvancedWr(fid, fieldname, numdt, numit, dt, entitype, geotype, localizationname, filter, value)

def MEDfieldValueWithProfileWr(fid, fieldname, numdt, numit, dt, entitype, geotype, storagemode, profilename, localizationname, switchmode, componentselect, nentity, value):
    r"""
    MEDfieldValueWithProfileWr(fid, fieldname, numdt, numit, dt, entitype, geotype, storagemode, profilename, localizationname, switchmode, componentselect, nentity, value) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    dt: med_float const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    storagemode: enum med_storage_mode const
    profilename: char const *const
    localizationname: char const *const
    switchmode: enum med_switch_mode const
    componentselect: med_int const
    nentity: med_int const
    value: unsigned char const *const

    """
    return _medfield.MEDfieldValueWithProfileWr(fid, fieldname, numdt, numit, dt, entitype, geotype, storagemode, profilename, localizationname, switchmode, componentselect, nentity, value)

def MEDfieldValueWr(fid, fieldname, numdt, numit, dt, entitype, geotype, switchmode, componentselect, nentity, value):
    r"""
    MEDfieldValueWr(fid, fieldname, numdt, numit, dt, entitype, geotype, switchmode, componentselect, nentity, value) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    dt: med_float const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    switchmode: enum med_switch_mode const
    componentselect: med_int const
    nentity: med_int const
    value: unsigned char const *const

    """
    return _medfield.MEDfieldValueWr(fid, fieldname, numdt, numit, dt, entitype, geotype, switchmode, componentselect, nentity, value)

def MEDfieldValueAdvancedRd(fid, fieldname, numdt, numit, entitype, geotype, filter, value):
    r"""
    MEDfieldValueAdvancedRd(fid, fieldname, numdt, numit, entitype, geotype, filter, value) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    filter: med_filter const *const
    value: unsigned char *const

    """
    return _medfield.MEDfieldValueAdvancedRd(fid, fieldname, numdt, numit, entitype, geotype, filter, value)

def MEDfieldValueWithProfileRd(fid, fieldname, numdt, numit, entitype, geotype, storagemode, profilename, switchmode, componentselect, value):
    r"""
    MEDfieldValueWithProfileRd(fid, fieldname, numdt, numit, entitype, geotype, storagemode, profilename, switchmode, componentselect, value) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    storagemode: enum med_storage_mode const
    profilename: char const *const
    switchmode: enum med_switch_mode const
    componentselect: med_int const
    value: unsigned char *const

    """
    return _medfield.MEDfieldValueWithProfileRd(fid, fieldname, numdt, numit, entitype, geotype, storagemode, profilename, switchmode, componentselect, value)

def MEDfield23ValueWithProfileRd(fid, fieldname, numdt, numit, entitype, geotype, meshname, storagemode, profilename, switchmode, componentselect, value):
    r"""
    MEDfield23ValueWithProfileRd(fid, fieldname, numdt, numit, entitype, geotype, meshname, storagemode, profilename, switchmode, componentselect, value) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    meshname: char const *const
    storagemode: enum med_storage_mode const
    profilename: char const *const
    switchmode: enum med_switch_mode const
    componentselect: med_int const
    value: unsigned char *const

    """
    return _medfield.MEDfield23ValueWithProfileRd(fid, fieldname, numdt, numit, entitype, geotype, meshname, storagemode, profilename, switchmode, componentselect, value)

def MEDfieldValueRd(fid, fieldname, numdt, numit, entitype, geotype, switchmode, componentselect, value):
    r"""
    MEDfieldValueRd(fid, fieldname, numdt, numit, entitype, geotype, switchmode, componentselect, value) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    switchmode: enum med_switch_mode const
    componentselect: med_int const
    value: unsigned char *const

    """
    return _medfield.MEDfieldValueRd(fid, fieldname, numdt, numit, entitype, geotype, switchmode, componentselect, value)

def MEDfieldnComponentByName(fid, fieldname):
    r"""
    MEDfieldnComponentByName(fid, fieldname) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const

    """
    return _medfield.MEDfieldnComponentByName(fid, fieldname)

def MEDfieldnComponent(fid, ind):
    r"""
    MEDfieldnComponent(fid, ind) -> med_int

    Parameters
    ----------
    fid: med_idt const
    ind: int const

    """
    return _medfield.MEDfieldnComponent(fid, ind)

def MEDnField(fid):
    r"""
    MEDnField(fid) -> med_int

    Parameters
    ----------
    fid: med_idt const

    """
    return _medfield.MEDnField(fid)

def MEDfieldInfo(fid, ind):
    r"""
    MEDfieldInfo(fid, ind) -> med_err

    Parameters
    ----------
    fid: med_idt const
    ind: int const

    """
    return _medfield.MEDfieldInfo(fid, ind)

def MEDfieldComputingStepInfo(fid, fieldname, csit):
    r"""
    MEDfieldComputingStepInfo(fid, fieldname, csit) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    csit: int const

    """
    return _medfield.MEDfieldComputingStepInfo(fid, fieldname, csit)

def MEDfieldComputingStepMeshInfo(fid, fieldname, csit):
    r"""
    MEDfieldComputingStepMeshInfo(fid, fieldname, csit) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    csit: int const

    """
    return _medfield.MEDfieldComputingStepMeshInfo(fid, fieldname, csit)

def MEDfield23ComputingStepMeshInfo(fid, fieldname, csit):
    r"""
    MEDfield23ComputingStepMeshInfo(fid, fieldname, csit) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    csit: int const

    """
    return _medfield.MEDfield23ComputingStepMeshInfo(fid, fieldname, csit)

def MEDfieldComputingStepMeshWr(fid, fieldname, numdt, numit, meshnumdt, meshnumit):
    r"""
    MEDfieldComputingStepMeshWr(fid, fieldname, numdt, numit, meshnumdt, meshnumit) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    meshnumdt: med_int const
    meshnumit: med_int const

    """
    return _medfield.MEDfieldComputingStepMeshWr(fid, fieldname, numdt, numit, meshnumdt, meshnumit)

def MEDfieldInfoByName(fid, fieldname):
    r"""
    MEDfieldInfoByName(fid, fieldname) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const

    """
    return _medfield.MEDfieldInfoByName(fid, fieldname)

def MEDfieldnValueWithProfileByName(fid, fieldname, numdt, numit, entitype, geotype, profilename, storagemode):
    r"""
    MEDfieldnValueWithProfileByName(fid, fieldname, numdt, numit, entitype, geotype, profilename, storagemode) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    profilename: char const *const
    storagemode: enum med_storage_mode const

    """
    return _medfield.MEDfieldnValueWithProfileByName(fid, fieldname, numdt, numit, entitype, geotype, profilename, storagemode)

def MEDfieldnValueWithProfile(fid, fieldname, numdt, numit, entitype, geotype, profileit, storagemode):
    r"""
    MEDfieldnValueWithProfile(fid, fieldname, numdt, numit, entitype, geotype, profileit, storagemode) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    profileit: int const
    storagemode: enum med_storage_mode const

    """
    return _medfield.MEDfieldnValueWithProfile(fid, fieldname, numdt, numit, entitype, geotype, profileit, storagemode)

def MEDfieldnValue(fid, fieldname, numdt, numit, entitype, geotype):
    r"""
    MEDfieldnValue(fid, fieldname, numdt, numit, entitype, geotype) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const

    """
    return _medfield.MEDfieldnValue(fid, fieldname, numdt, numit, entitype, geotype)

def MEDfield23nValueWithProfile(fid, fieldname, numdt, numit, entitype, geotype, meshname, profileit, storagemode):
    r"""
    MEDfield23nValueWithProfile(fid, fieldname, numdt, numit, entitype, geotype, meshname, profileit, storagemode) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    meshname: char const *const
    profileit: int const
    storagemode: enum med_storage_mode const

    """
    return _medfield.MEDfield23nValueWithProfile(fid, fieldname, numdt, numit, entitype, geotype, meshname, profileit, storagemode)

def MEDfieldnProfile(fid, fieldname, numdt, numit, enttype, geotype):
    r"""
    MEDfieldnProfile(fid, fieldname, numdt, numit, enttype, geotype) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    enttype: enum med_entity_type const
    geotype: med_geometry_type const

    """
    return _medfield.MEDfieldnProfile(fid, fieldname, numdt, numit, enttype, geotype)

def MEDfield23nProfile(fid, fieldname, numdt, numit, entitype, geotype, meshit):
    r"""
    MEDfield23nProfile(fid, fieldname, numdt, numit, entitype, geotype, meshit) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitype: enum med_entity_type const
    geotype: med_geometry_type const
    meshit: int const

    """
    return _medfield.MEDfield23nProfile(fid, fieldname, numdt, numit, entitype, geotype, meshit)

def MEDfieldInterpWr(fid, fieldname, interpname):
    r"""
    MEDfieldInterpWr(fid, fieldname, interpname) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    interpname: char const *const

    """
    return _medfield.MEDfieldInterpWr(fid, fieldname, interpname)

def MEDfieldnInterp(fid, fieldname):
    r"""
    MEDfieldnInterp(fid, fieldname) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const

    """
    return _medfield.MEDfieldnInterp(fid, fieldname)

def MEDfieldInterpInfo(fid, fieldname, interpit):
    r"""
    MEDfieldInterpInfo(fid, fieldname, interpit) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    interpit: int const

    """
    return _medfield.MEDfieldInterpInfo(fid, fieldname, interpit)

def MEDfieldnEntityType(fid, fieldname, numdt, numit):
    r"""
    MEDfieldnEntityType(fid, fieldname, numdt, numit) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const

    """
    return _medfield.MEDfieldnEntityType(fid, fieldname, numdt, numit)

def MEDfieldEntityType(fid, fieldname, numdt, numit, usedbyncs):
    r"""
    MEDfieldEntityType(fid, fieldname, numdt, numit, usedbyncs) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    usedbyncs: med_int *const

    """
    return _medfield.MEDfieldEntityType(fid, fieldname, numdt, numit, usedbyncs)

def MEDfieldnGeometryType(fid, fieldname, numdt, numit, entitytype):
    r"""
    MEDfieldnGeometryType(fid, fieldname, numdt, numit, entitytype) -> med_int

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitytype: enum med_entity_type const

    """
    return _medfield.MEDfieldnGeometryType(fid, fieldname, numdt, numit, entitytype)

def MEDfieldGeometryType(fid, fieldname, numdt, numit, entitytype, geometrytypes, usedbyncs):
    r"""
    MEDfieldGeometryType(fid, fieldname, numdt, numit, entitytype, geometrytypes, usedbyncs) -> med_err

    Parameters
    ----------
    fid: med_idt const
    fieldname: char const *const
    numdt: med_int const
    numit: med_int const
    entitytype: enum med_entity_type const
    geometrytypes: med_geometry_type *const
    usedbyncs: med_int *const

    """
    return _medfield.MEDfieldGeometryType(fid, fieldname, numdt, numit, entitytype, geometrytypes, usedbyncs)


